# Compose file suitable for local development.
# First of all, read this file and pay attention to the FIXME comments.
#
# Then run with:
# docker compose up
#
# Will start a container with odoo and another one with postgres exposed
# on port 5433 (in case you have a local postgres already running).
# Also mounts a volume in your machine's /opt/odooo-docker/opt path mounted
# where the container's code is. The projects are cloned there, so you can
# use git to manage each container's repo branches.
---
version: '3.8'
name: {{ compose_project_name }}
services:
  db:
    environment:
      # DB env var needed for auto init on first run
      - POSTGRES_DB=postgres
      - POSTGRES_PASSWORD=odoo
      - POSTGRES_USER=odoo
    healthcheck:
      interval: 15s
      # The odoo user has to match the `POSTGRES_USER` in the env vars
      test: [
        "CMD-SHELL",
        'psql -U odoo -d postgres -h 127.0.0.1 -p 5432 -c "select 1"'
      ]
      start_period: 5s  # This might be too long after first run.
      retries: 5
    image: postgres:16.2
    ports:
      - "5433:5432"
    volumes:
      - data_storage:/var/lib/postgresql/data
  odoo16:
    # TODO: document the admin user password change for odoo 16:
    # This command sets the admin (id=2) password to "1" (just the number)
    # docker exec ${PSQL_CONTAINER_NAME} \
    #     psql -U odoo -h 127.0.0.1 -p 5432 -d ${DATABASE_NAME} \
    #     -c "UPDATE res_users SET password='\$pbkdf2-sha512\$25000\$4xwjZEwJgbCWsvaec875nw\$eKhXFLBpAWHixi3QaE4/UHVfDLKEFLV5ZG4HFWP2FfctTAi6Jx4pahTQWgnVbqO3yXl9AQgdM8gHksNrbrh8Jg' WHERE id=2"
    # Don't forget to escape the $ signs in the password being set.
    #
    # Use one of these commands if you need to update modules on start-up
    # command: ["/opt/odoo/odoo-bin", "-d", "${DATABASE_NAME}", "-u", "module_to_update"]
    # command: ["/opt/odoo/odoo-bin", "-d", "${DATABASE_NAME}", "-u", "all"]
    #
    container_name: ${COMPOSE_PROJECT_NAME}_odoo16
    depends_on:
      db:
        condition: service_healthy
        restart: true
    environment:
      - DB_FILTER={{ db_filter }}
    image: "rubencabrera/odoo-docker:16.2.0"
    ports: 
      - "6899:6899"  # pudb telnet port
      - "8069:8069"
      - "8071:8071"
      - "8072:8072"
    restart: always
    volumes:
      - code_volume:/opt/repos
      - odoo_data:/var/lib/odoo
      - upstream_volume:/opt/odoo
volumes:
  code_volume:
    # This is where the code will live. For local development, you might want
    # to use something owned by your user.
    driver: local
    driver_opts:
      o: bind
      type: none
      # FIXME: The local paths need to exist for volumes to be mounted.
      #     For prod environments, this might be better inside a dir in `/opt`
      device: ${ODOO_DOCKER_REPOS_HOST_PATH:-${HOME}/.${COMPOSE_PROJECT_NAME}_repos}
    name: ${COMPOSE_PROJECT_NAME}_code
  data_storage:
    name: ${COMPOSE_PROJECT_NAME}_data_storage
  odoo_data:
    name: ${COMPOSE_PROJECT_NAME}_odoo_data
  upstream_volume:
    # Odoo main code. This volume should only be needed for upstream
    # contributions.
    driver: local
    driver_opts:
      o: bind
      type: none
      # FIXME: The local paths need to exist for volumes to be mounted.
      #     For prod environments, this might be better inside a dir in `/opt`
      device: ${ODOO_DOCKER_UPSTREAM_HOST_PATH:-${HOME}/.${COMPOSE_PROJECT_NAME}_upstream}
    name: ${COMPOSE_PROJECT_NAME}_upstream
